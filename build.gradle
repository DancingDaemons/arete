
plugins {
	id 'java'
	id("org.springframework.boot") version "3.1.3"
	id("io.spring.dependency-management") version "1.1.3"
}

group = "com.exemplar"
version = "0.0.1-SNAPSHOT"

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.mapstruct:mapstruct:1.5.5.Final")
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:2.3.3.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	testImplementation("org.springframework.boot:spring-boot-starter-test")
}


bootJar.enabled = false


test {
	useJUnitPlatform()
	minHeapSize = "1024m"
	maxHeapSize = "2048m"
}

task installFrontend(type: Exec) {
	inputs.file(file("frontend/yarn.lock"))
	inputs.file(file("frontend/package.json"))
	commandLine("yarn", "--cwd", "frontend", "install")
}

task installJourney(type: Exec) {
	inputs.file(file("journey/yarn.lock"))
	inputs.file(file("journey/package.json"))
	outputs.dir(file("journey/node_modules"))
	commandLine("yarn", "--cwd", "journey", "install")
}

task buildFrontend(type: Exec) {
	dependsOn("installFrontend")
	inputs.dir(file("frontend"))
	outputs.dir(file("frontend/build"))
	commandLine("yarn", "--cwd", "frontend", "build")
}

task copyFrontend(type: Sync) {
	dependsOn("buildFrontend")
	from(file("./frontend/build"))
	into(file("$buildDir/resources/main/static"))
	doLast {
		println("copied built frontend to static resources")
	}
}

task copyFrontendForIntelliJ(type: Sync) {
	dependsOn("buildFrontend")
	from(file("./frontend/build"))
	into(file("./src/main/resources/static"))
	doLast {
		println("copied built frontend to static resources")
	}
}

task cleanFrontend(type: Delete) {
	delete(file("./frontend/build"))
	delete(file("./src/main/resources/static"))
}

task testFrontend(type: Exec) {
	dependsOn("installFrontend")
	commandLine("yarn", "--cwd", "frontend", "test")
}

task testJourney(type: Exec) {
	dependsOn("installJourney")
	commandLine("yarn", "--cwd", "journey", "test")
}

task installPerformance(type: Exec) {
	inputs.file(file("performance/yarn.lock"))
	inputs.file(file("performance/package.json"))
	outputs.dir(file("performance/node_modules"))
	commandLine("yarn", "--cwd", "performance", "install")
}

task testPerformance(type: Exec) {
	dependsOn("installPerformance")
	commandLine("yarn", "--cwd", "performance", "test")
}

task testAll() {
	dependsOn("test", "testFrontend", "testJourney")
}

task showRepositories {
	repositories.each {
		println "repository: ${it.name} ('${it.url}')"
	}
}


bootJar {
	dependsOn(copyFrontend)
}

bootRun {
	dependsOn(copyFrontend)
}

clean {
	dependsOn(cleanFrontend)
}

//jacocoTestReport {
//	dependsOn(test)
//	reports {
//		xml.enabled = true
//	}
//}
